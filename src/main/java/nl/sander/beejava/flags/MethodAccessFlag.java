package nl.sander.beejava.flags;

import java.util.Optional;

public enum MethodAccessFlag implements AccessFlags {
    PUBLIC(0x0001), // Declared public; may be accessed from outside its package.
    PRIVATE(0x0002), // Declared private; accessible only within the defining class and other classes belonging to the same nest (ยง5.4.4).
    PROTECTED(0x0004), // Declared protected; may be accessed within subclasses.
    STATIC(0x0008), // Declared static.
    FINAL(0x0010), // Declared final; must not be overridden (ยง5.4.5).
    SYNCHRONIZED(0x0020), // Declared  synchronized;  invocation  is  wrapped by a monitor use.
    BRIDGE(0x0040), // A bridge method, generated by the compiler.
    VARARGS(0x0080), //Declared with variable number of arguments.
    NATIVE(0x0100), //Declared native; implemented in a language other than the Java programming language.
    ABSTRACT(0x0400), // Declared abstract; no implementation is provided.
    STRICT(0x0800), // Declared  strictfp; floating-point mode  is  FP-strict.
    SYNTHETIC(0x1000); // Declared synthetic; not present in the source code.

    private final int bytecode;

    MethodAccessFlag(int bytecode) {
        this.bytecode = bytecode;
    }

    public int getBytecode() {
        return bytecode;
    }

    public static Optional<MethodAccessFlag> get(String text) {
        for (MethodAccessFlag flag : MethodAccessFlag.values()) {
            if (flag.toString().equals(text)) {
                return Optional.of(flag);
            }
        }
        return Optional.empty();
    }
}
